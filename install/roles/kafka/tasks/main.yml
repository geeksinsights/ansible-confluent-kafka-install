---
#
# Install Kafka in the hosts
#

- name: Copy Repo file
  copy:
    src="{{ role_path }}/files/confluent.repo"
    dest=/etc/yum.repos.d/
    owner=root
    group=root
    mode=0750
  become: true

- name: Download RPM Key
  shell: |
    sudo rpm --import https://packages.confluent.io/rpm/4.1/archive.key
  become: true

- name: Install Yum Package
  shell: |
    yum -y install java-1.8.0-openjdk.x86_64
    yum -y install confluent-platform-oss-2.11
  become: true
  warn: False

- name: Add JAVA HOME to PATH
  lineinfile:
    path: /etc/profile
    line: export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk

- name: Add JRE HOME to PATH
  lineinfile:
    path: /etc/profile
    line: export JRE_HOME=/usr/lib/jvm/jre

- name: Create Necessary Directories
  shell: |
    chown -R cp-kafka:confluent /kafka
    mkdir -p /etc/kafka
    mkdir -p {{ kafka_directory }}
    mkdir -p /kafka/kafka-logs
    chown -R cp-kafka:confluent {{ kafka_directory }}
    chown -R cp-kafka:confluent /kafka/kafka-logs
  become: true

- name: Copy Server.properties template file
  copy:
    src="{{ role_path }}/files/server.properties"
    dest=/etc/kafka/
    owner=cp-kafka
    group=confluent
    mode=0750
  become: true

- name: Replace required items in server.properties
  replace:
    path: "{{ item.path }}"
    regexp: "{{ item.regexp1 }}"
    replace: "{{ item.replace }}"
  with_items:
    - { path: '/etc/kafka/server.properties', regexp1: 'nodename', replace: '{{ inventory_hostname }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'datadir', replace: '{{ kafka_directory }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'zoonodelist', replace: '{{ zookeeper_node_list }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'keystorepassword', replace: '{{ keystore_password }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'keypassword', replace: '{{ key_password }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'truststore.jks', replace: '{{ truststore_name }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'keystore.jks', replace: '{{ keystore_name }}'} 
    - { path: '/etc/kafka/server.properties', regexp1: 'truststorepassword', replace: '{{ truststore_password }}'} 
  ignore_errors: "{{ ansible_check_mode }}"
  when: "{{ ssl_mode }}" == 'Yes'

- name: Replace required items in server.properties
  replace:
    path: "{{ item.path }}"
    regexp: "{{ item.regexp1 }}"
    replace: "{{ item.replace }}"
  with_items:
    - { path: '/etc/kafka/server.properties', regexp1: 'nodename', replace: '{{ inventory_hostname }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'datadir', replace: '{{ kafka_directory }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'zoonodelist', replace: '{{ zookeeper_node_list }}'}
    - { path: '/etc/kafka/server.properties', regexp1: 'security.inter.broker.protocol=SSL', replace: 'security.inter.broker.protocol=PLAIN'}

  ignore_errors: "{{ ansible_check_mode }}"
  when: "{{ ssl_mode }}" == 'Yes'

  
- name: Copy SSL Certificates
  copy:
    src="{{ role_path }}/files/{{ cert_file}}"
    dest=/etc/kafka/
    owner=root
    group=root
    mode=0750
  become: true
  when: "{{ ssl_mode }}" == 'Yes'

- name: Copy SSL KEY
  copy:
    src="{{ role_path }}/files/{{ key_file }}"
    dest=/etc/kafka/
    owner=root
    group=root
    mode=0600
  become: true
  when: "{{ ssl_mode }}" == 'Yes'

- name: Create keystore and keystore password from Certifcates
  shell: |
   cd /etc/kafka/
   openssl pkcs12 -export -out "{{ keystore_path}}"/kafka_keystore.p12 -inkey "{{ key_file }}" -in "{{ cert_file }}" -certfile "{{ cert_file }}" -name  *."{{ domain }}" -password pass:"{{ keystore_password }}"
   "{{ java_home }}"/bin/keytool -importkeystore -srckeystore "{{ keystore_path}}"/kafka_keystore.p12 -srcstoretype PKCS12 -srcalias *."{{ domain }}" -deststoretype JKS -destkeystore "{{ keystore_path }}"/"{{ keystore_name }}" -deststorepass {{ keystore_password }} -srcstorepass {{ keystore_password }} -noprompt
   "{{ java_home }}"/bin/keytool/keytool -importkeystore -srckeystore "{{ keystore_path}}"/"{{ keystore_name }}" -destkeystore "{{ keystore_path}}"/"{{ keystore_name }}".jks -deststoretype pkcs12 -deststorepass "{{ keystore_password }}" -srcstorepass "{{ keystore_password }}" -noprompt
   keytool -import -v -trustcacerts -alias *."{{ domain }}" -file "{{ cert_file }}" -keystore "{{ keystore_path}}"/"{{  truststore_name }} -keypass {{keystore_password }} -storepass {{ keystore_password }} -noprompt"
   openssl pkcs12 -in "{{ keystore_name }}" -nokeys -out "{{ env }}_CLIENT.cer.pem" -passin pass:"{{ keystore_password }}"
   openssl pkcs12 -in "{{ keystore_path}}"/"{{ keystore_name }}" -nodes -nocerts -out {{ env }}_CLIENT.key.pem -passin pass:"{{ keystore_password }}"
   chmod 600 "{{ keystore_path}}"/"{{ key_file }}"
  ignore_errors: "{{ ansible_check_mode }}"
  when: "{{ ssl_mode }}" == 'Yes'

- name: size half of memory
  replace:
    path: "{{ item.path }}"
    regexp: "{{ item.regexp1 }}"
    replace: "{{ item.replace }}"
  with_items:
    - { path: '/usr/bin/kafka-server-start', regexp1: '-Xmx1G -Xms1G', replace: '-Xmx{{ memory_gb }}G -Xms{{ memory_gb }}G'}
  ignore_errors: "{{ ansible_check_mode }}"


- name: kafka performance opts
  replace:
    path: "{{ item.path }}"
    regexp: "{{ item.regexp1 }}"
    replace: "{{ item.replace }}"
  with_items:
    - { path: '/usr/bin/kafka-run-class', regexp1: 'KAFKA_JVM_PERFORMANCE_OPTS="-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true"', replace: 'KAFKA_JVM_PERFORMANCE_OPTS="-XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"'}
  ignore_errors: "{{ ansible_check_mode }}"

- name: enable unit
  command: systemctl enable confluent-kafka

